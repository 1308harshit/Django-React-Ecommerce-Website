{"ast":null,"code":"// import {\n//     CARD_CREATE_REQUEST,\n//     CARD_CREATE_SUCCESS,\n//     CARD_CREATE_FAIL,\n\n//     CHARGE_CARD_REQUEST,\n//     CHARGE_CARD_SUCCESS,\n//     CHARGE_CARD_FAIL,\n\n//     SAVED_CARDS_LIST_REQUEST,\n//     SAVED_CARDS_LIST_SUCCESS,\n//     SAVED_CARDS_LIST_FAIL,\n\n//     DELETE_SAVED_CARD_REQUEST,\n//     DELETE_SAVED_CARD_SUCCESS,\n//     DELETE_SAVED_CARD_FAIL,\n\n//     UPDATE_STRIPE_CARD_REQUEST,\n//     UPDATE_STRIPE_CARD_SUCCESS,\n//     UPDATE_STRIPE_CARD_FAIL,\n\n// } from '../constants/index'\n\n// import axios from 'axios'\n\n// // create card\n// export const createCard = (cardData) => async (dispatch, getState) => {\n\n//     try {\n\n//         dispatch({\n//             type: CARD_CREATE_REQUEST\n//         })\n\n//         const {\n//             userLoginReducer: { userInfo },\n//         } = getState()\n\n//         const config = {\n//             headers: {\n//                 \"Content-Type\": \"application/json\",\n//                 Authorization: `Bearer ${userInfo.token}`,\n//                 \"Card-Number\": cardData.cardNumber,\n//             }\n//         }\n\n//         // api call\n//         const { data } = await axios.post(\n//             \"/payments/create-card/\",\n//             {\n//                 'email': cardData.email,\n//                 'number': cardData.cardNumber,\n//                 'exp_month': cardData.expMonth,\n//                 'exp_year': cardData.expYear,\n//                 'cvc': cardData.cvc,\n//                 'save_card': cardData.saveCard\n//             },\n//             config\n//         )\n\n//         dispatch({\n//             type: CARD_CREATE_SUCCESS,\n//             payload: data\n//         })\n\n//     } catch (error) {\n//         dispatch({\n//             type: CARD_CREATE_FAIL,\n//             payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n//         })\n//     }\n// }\n\n// // charge customer\n// export const chargeCustomer = (cardData) => async (dispatch, getState) => {\n\n//     try {\n\n//         dispatch({\n//             type: CHARGE_CARD_REQUEST\n//         })\n\n//         const {\n//             userLoginReducer: { userInfo },\n//         } = getState()\n\n//         const config = {\n//             headers: {\n//                 \"Content-Type\": \"application/json\",\n//                 Authorization: `Bearer ${userInfo.token}`\n//             }\n//         }\n\n//         // api call\n//         const { data } = await axios.post(\n//             \"/payments/charge-customer/\",\n//             cardData,\n//             config\n//         )\n\n//         dispatch({\n//             type: CHARGE_CARD_SUCCESS,\n//             payload: data\n//         })\n\n//     } catch (error) {\n//         dispatch({\n//             type: CHARGE_CARD_FAIL,\n//             payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n//         })\n//     }\n// }\n\n// // saved cards list\n// export const savedCardsList = () => async (dispatch, getState) => {\n\n//     try {\n//         dispatch({\n//             type: SAVED_CARDS_LIST_REQUEST,\n//         })\n\n//         const {\n//             userLoginReducer: { userInfo }\n//         } = getState()\n\n//         const config = {\n//             headers: {\n//                 \"Content-Type\": \"application/json\",\n//                 Authorization: `Bearer ${userInfo.token}`\n//             }\n//         }\n\n//         // api call\n//         const { data } = await axios.get('/account/stripe-cards/', config)\n\n//         dispatch({\n//             type: SAVED_CARDS_LIST_SUCCESS,\n//             payload: data\n//         })\n\n//     } catch (error) {\n//         dispatch({\n//             type: SAVED_CARDS_LIST_FAIL,\n//             payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n//         })\n//     }\n// }\n\n// // update stripe card\n// export const updateStripeCard = (cardData) => async (dispatch, getState) => {\n\n//     try {\n\n//         dispatch({\n//             type: UPDATE_STRIPE_CARD_REQUEST\n//         })\n\n//         const {\n//             userLoginReducer: { userInfo },\n//         } = getState()\n\n//         const config = {\n//             headers: {\n//                 \"Content-Type\": \"application/json\",\n//                 Authorization: `Bearer ${userInfo.token}`\n//             }\n//         }\n\n//         // api call\n//         const { data } = await axios.post(\n//             \"/payments/update-card/\",\n//             cardData,\n//             config\n//         )\n\n//         dispatch({\n//             type: UPDATE_STRIPE_CARD_SUCCESS,\n//             payload: data\n//         })\n\n//     } catch (error) {\n//         dispatch({\n//             type: UPDATE_STRIPE_CARD_FAIL,\n//             payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n//         })\n//     }\n// }\n\n// // delete saved card\n// export const deleteSavedCard = (card_number) => async (dispatch, getState) => {\n\n//     try {\n//         dispatch({\n//             type: DELETE_SAVED_CARD_REQUEST,\n//         })\n\n//         const {\n//             userLoginReducer: { userInfo }\n//         } = getState()\n\n//         const config = {\n//             headers: {\n//                 \"Content-Type\": \"application/json\",\n//                 Authorization: `Bearer ${userInfo.token}`\n//             }\n//         }\n\n//         // api call\n//         const { data } = await axios.post(\n//             '/payments/delete-card/',\n//             { \"card_number\": card_number },\n//             config\n//         )\n\n//         dispatch({\n//             type: DELETE_SAVED_CARD_SUCCESS,\n//             payload: data\n//         })\n\n//     } catch (error) {\n//         dispatch({\n//             type: DELETE_SAVED_CARD_FAIL,\n//             payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n//         })\n//     }\n// }\n\n// Import action types and axios library for making HTTP requests\nimport { CARD_CREATE_REQUEST, CARD_CREATE_SUCCESS, CARD_CREATE_FAIL, CHARGE_CARD_REQUEST, CHARGE_CARD_SUCCESS, CHARGE_CARD_FAIL, SAVED_CARDS_LIST_REQUEST, SAVED_CARDS_LIST_SUCCESS, SAVED_CARDS_LIST_FAIL, DELETE_SAVED_CARD_REQUEST, DELETE_SAVED_CARD_SUCCESS, DELETE_SAVED_CARD_FAIL, UPDATE_STRIPE_CARD_REQUEST, UPDATE_STRIPE_CARD_SUCCESS, UPDATE_STRIPE_CARD_FAIL } from '../constants/index';\nimport axios from 'axios';\n\n// Action to create a new card\nexport const createCard = cardData => async (dispatch, getState) => {\n  try {\n    // Dispatch request action to indicate the start of the API call\n    dispatch({\n      type: CARD_CREATE_REQUEST\n    });\n\n    // Get user information from the Redux state\n    const {\n      userLoginReducer: {\n        userInfo\n      }\n    } = getState();\n\n    // Configuration for the request headers, including authentication token\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // Set content type to JSON\n        Authorization: `Bearer ${userInfo.token}`,\n        // Include JWT token for authentication\n        \"Card-Number\": cardData.cardNumber // Additional header for card number\n      }\n    };\n\n    // Make the API call to create a new card\n    const {\n      data\n    } = await axios.post(\"/payments/create-card/\",\n    // Endpoint to create a card\n    {\n      'email': cardData.email,\n      'number': cardData.cardNumber,\n      'exp_month': cardData.expMonth,\n      'exp_year': cardData.expYear,\n      'cvc': cardData.cvc,\n      'save_card': cardData.saveCard\n    }, config);\n\n    // Dispatch success action with the response data\n    dispatch({\n      type: CARD_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    // Dispatch failure action with error details\n    dispatch({\n      type: CARD_CREATE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\n\n// Action to charge the customer\nexport const chargeCustomer = cardData => async (dispatch, getState) => {\n  try {\n    // Dispatch request action to indicate the start of the API call\n    dispatch({\n      type: CHARGE_CARD_REQUEST\n    });\n\n    // Get user information from the Redux state\n    const {\n      userLoginReducer: {\n        userInfo\n      }\n    } = getState();\n\n    // Configuration for the request headers, including authentication token\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // Set content type to JSON\n        Authorization: `Bearer ${userInfo.token}` // Include JWT token for authentication\n      }\n    };\n\n    // Make the API call to charge the customer\n    const {\n      data\n    } = await axios.post(\"/payments/charge-customer/\",\n    // Endpoint to charge the customer\n    cardData,\n    // Data including card details and amount\n    config);\n\n    // Dispatch success action with the response data\n    dispatch({\n      type: CHARGE_CARD_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    // Dispatch failure action with error details\n    dispatch({\n      type: CHARGE_CARD_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\n\n// Action to get a list of saved cards\nexport const savedCardsList = () => async (dispatch, getState) => {\n  try {\n    // Dispatch request action to indicate the start of the API call\n    dispatch({\n      type: SAVED_CARDS_LIST_REQUEST\n    });\n\n    // Get user information from the Redux state\n    const {\n      userLoginReducer: {\n        userInfo\n      }\n    } = getState();\n\n    // Configuration for the request headers, including authentication token\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // Set content type to JSON\n        Authorization: `Bearer ${userInfo.token}` // Include JWT token for authentication\n      }\n    };\n\n    // Make the API call to get the list of saved cards\n    const {\n      data\n    } = await axios.get('/account/stripe-cards/', config);\n\n    // Dispatch success action with the response data\n    dispatch({\n      type: SAVED_CARDS_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    // Dispatch failure action with error details\n    dispatch({\n      type: SAVED_CARDS_LIST_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\n\n// Action to update a saved Stripe card\nexport const updateStripeCard = cardData => async (dispatch, getState) => {\n  try {\n    // Dispatch request action to indicate the start of the API call\n    dispatch({\n      type: UPDATE_STRIPE_CARD_REQUEST\n    });\n\n    // Get user information from the Redux state\n    const {\n      userLoginReducer: {\n        userInfo\n      }\n    } = getState();\n\n    // Configuration for the request headers, including authentication token\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // Set content type to JSON\n        Authorization: `Bearer ${userInfo.token}` // Include JWT token for authentication\n      }\n    };\n\n    // Make the API call to update the card details\n    const {\n      data\n    } = await axios.post(\"/payments/update-card/\",\n    // Endpoint to update a card\n    cardData,\n    // Data including updated card details\n    config);\n\n    // Dispatch success action with the response data\n    dispatch({\n      type: UPDATE_STRIPE_CARD_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    // Dispatch failure action with error details\n    dispatch({\n      type: UPDATE_STRIPE_CARD_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\n\n// Action to delete a saved card\nexport const deleteSavedCard = card_number => async (dispatch, getState) => {\n  try {\n    // Dispatch request action to indicate the start of the API call\n    dispatch({\n      type: DELETE_SAVED_CARD_REQUEST\n    });\n\n    // Get user information from the Redux state\n    const {\n      userLoginReducer: {\n        userInfo\n      }\n    } = getState();\n\n    // Configuration for the request headers, including authentication token\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // Set content type to JSON\n        Authorization: `Bearer ${userInfo.token}` // Include JWT token for authentication\n      }\n    };\n\n    // Make the API call to delete a saved card\n    const {\n      data\n    } = await axios.post('/payments/delete-card/',\n    // Endpoint to delete a card\n    {\n      \"card_number\": card_number\n    },\n    // Data with the card number to delete\n    config);\n\n    // Dispatch success action with the response data\n    dispatch({\n      type: DELETE_SAVED_CARD_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    // Dispatch failure action with error details\n    dispatch({\n      type: DELETE_SAVED_CARD_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};","map":{"version":3,"names":["CARD_CREATE_REQUEST","CARD_CREATE_SUCCESS","CARD_CREATE_FAIL","CHARGE_CARD_REQUEST","CHARGE_CARD_SUCCESS","CHARGE_CARD_FAIL","SAVED_CARDS_LIST_REQUEST","SAVED_CARDS_LIST_SUCCESS","SAVED_CARDS_LIST_FAIL","DELETE_SAVED_CARD_REQUEST","DELETE_SAVED_CARD_SUCCESS","DELETE_SAVED_CARD_FAIL","UPDATE_STRIPE_CARD_REQUEST","UPDATE_STRIPE_CARD_SUCCESS","UPDATE_STRIPE_CARD_FAIL","axios","createCard","cardData","dispatch","getState","type","userLoginReducer","userInfo","config","headers","Authorization","token","cardNumber","data","post","email","expMonth","expYear","cvc","saveCard","payload","error","response","detail","message","chargeCustomer","savedCardsList","get","updateStripeCard","deleteSavedCard","card_number"],"sources":["D:/CLG/SEM-4/IP_FSD_PYTHON_12_C1/ecom1/frontend/src/actions/cardActions.js"],"sourcesContent":["// import {\r\n//     CARD_CREATE_REQUEST,\r\n//     CARD_CREATE_SUCCESS,\r\n//     CARD_CREATE_FAIL,\r\n\r\n//     CHARGE_CARD_REQUEST,\r\n//     CHARGE_CARD_SUCCESS,\r\n//     CHARGE_CARD_FAIL,\r\n\r\n//     SAVED_CARDS_LIST_REQUEST,\r\n//     SAVED_CARDS_LIST_SUCCESS,\r\n//     SAVED_CARDS_LIST_FAIL,\r\n\r\n//     DELETE_SAVED_CARD_REQUEST,\r\n//     DELETE_SAVED_CARD_SUCCESS,\r\n//     DELETE_SAVED_CARD_FAIL,\r\n\r\n//     UPDATE_STRIPE_CARD_REQUEST,\r\n//     UPDATE_STRIPE_CARD_SUCCESS,\r\n//     UPDATE_STRIPE_CARD_FAIL,\r\n\r\n// } from '../constants/index'\r\n\r\n// import axios from 'axios'\r\n\r\n// // create card\r\n// export const createCard = (cardData) => async (dispatch, getState) => {\r\n\r\n//     try {\r\n\r\n//         dispatch({\r\n//             type: CARD_CREATE_REQUEST\r\n//         })\r\n\r\n//         const {\r\n//             userLoginReducer: { userInfo },\r\n//         } = getState()\r\n\r\n//         const config = {\r\n//             headers: {\r\n//                 \"Content-Type\": \"application/json\",\r\n//                 Authorization: `Bearer ${userInfo.token}`,\r\n//                 \"Card-Number\": cardData.cardNumber,\r\n//             }\r\n//         }\r\n\r\n//         // api call\r\n//         const { data } = await axios.post(\r\n//             \"/payments/create-card/\",\r\n//             {\r\n//                 'email': cardData.email,\r\n//                 'number': cardData.cardNumber,\r\n//                 'exp_month': cardData.expMonth,\r\n//                 'exp_year': cardData.expYear,\r\n//                 'cvc': cardData.cvc,\r\n//                 'save_card': cardData.saveCard\r\n//             },\r\n//             config\r\n//         )\r\n\r\n//         dispatch({\r\n//             type: CARD_CREATE_SUCCESS,\r\n//             payload: data\r\n//         })\r\n\r\n//     } catch (error) {\r\n//         dispatch({\r\n//             type: CARD_CREATE_FAIL,\r\n//             payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\r\n//         })\r\n//     }\r\n// }\r\n\r\n\r\n// // charge customer\r\n// export const chargeCustomer = (cardData) => async (dispatch, getState) => {\r\n\r\n//     try {\r\n\r\n//         dispatch({\r\n//             type: CHARGE_CARD_REQUEST\r\n//         })\r\n\r\n//         const {\r\n//             userLoginReducer: { userInfo },\r\n//         } = getState()\r\n\r\n//         const config = {\r\n//             headers: {\r\n//                 \"Content-Type\": \"application/json\",\r\n//                 Authorization: `Bearer ${userInfo.token}`\r\n//             }\r\n//         }\r\n\r\n//         // api call\r\n//         const { data } = await axios.post(\r\n//             \"/payments/charge-customer/\",\r\n//             cardData,\r\n//             config\r\n//         )\r\n\r\n//         dispatch({\r\n//             type: CHARGE_CARD_SUCCESS,\r\n//             payload: data\r\n//         })\r\n\r\n//     } catch (error) {\r\n//         dispatch({\r\n//             type: CHARGE_CARD_FAIL,\r\n//             payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\r\n//         })\r\n//     }\r\n// }\r\n\r\n\r\n// // saved cards list\r\n// export const savedCardsList = () => async (dispatch, getState) => {\r\n\r\n//     try {\r\n//         dispatch({\r\n//             type: SAVED_CARDS_LIST_REQUEST,\r\n//         })\r\n\r\n//         const {\r\n//             userLoginReducer: { userInfo }\r\n//         } = getState()\r\n\r\n//         const config = {\r\n//             headers: {\r\n//                 \"Content-Type\": \"application/json\",\r\n//                 Authorization: `Bearer ${userInfo.token}`\r\n//             }\r\n//         }\r\n\r\n//         // api call\r\n//         const { data } = await axios.get('/account/stripe-cards/', config)\r\n\r\n//         dispatch({\r\n//             type: SAVED_CARDS_LIST_SUCCESS,\r\n//             payload: data\r\n//         })\r\n\r\n//     } catch (error) {\r\n//         dispatch({\r\n//             type: SAVED_CARDS_LIST_FAIL,\r\n//             payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\r\n//         })\r\n//     }\r\n// }\r\n\r\n\r\n// // update stripe card\r\n// export const updateStripeCard = (cardData) => async (dispatch, getState) => {\r\n\r\n//     try {\r\n\r\n//         dispatch({\r\n//             type: UPDATE_STRIPE_CARD_REQUEST\r\n//         })\r\n\r\n//         const {\r\n//             userLoginReducer: { userInfo },\r\n//         } = getState()\r\n\r\n//         const config = {\r\n//             headers: {\r\n//                 \"Content-Type\": \"application/json\",\r\n//                 Authorization: `Bearer ${userInfo.token}`\r\n//             }\r\n//         }\r\n\r\n//         // api call\r\n//         const { data } = await axios.post(\r\n//             \"/payments/update-card/\",\r\n//             cardData,\r\n//             config\r\n//         )\r\n\r\n//         dispatch({\r\n//             type: UPDATE_STRIPE_CARD_SUCCESS,\r\n//             payload: data\r\n//         })\r\n\r\n//     } catch (error) {\r\n//         dispatch({\r\n//             type: UPDATE_STRIPE_CARD_FAIL,\r\n//             payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\r\n//         })\r\n//     }\r\n// }\r\n\r\n\r\n\r\n// // delete saved card\r\n// export const deleteSavedCard = (card_number) => async (dispatch, getState) => {\r\n\r\n//     try {\r\n//         dispatch({\r\n//             type: DELETE_SAVED_CARD_REQUEST,\r\n//         })\r\n\r\n//         const {\r\n//             userLoginReducer: { userInfo }\r\n//         } = getState()\r\n\r\n//         const config = {\r\n//             headers: {\r\n//                 \"Content-Type\": \"application/json\",\r\n//                 Authorization: `Bearer ${userInfo.token}`\r\n//             }\r\n//         }\r\n\r\n//         // api call\r\n//         const { data } = await axios.post(\r\n//             '/payments/delete-card/',\r\n//             { \"card_number\": card_number },\r\n//             config\r\n//         )\r\n\r\n//         dispatch({\r\n//             type: DELETE_SAVED_CARD_SUCCESS,\r\n//             payload: data\r\n//         })\r\n\r\n//     } catch (error) {\r\n//         dispatch({\r\n//             type: DELETE_SAVED_CARD_FAIL,\r\n//             payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\r\n//         })\r\n//     }\r\n// }\r\n\r\n// Import action types and axios library for making HTTP requests\r\nimport {\r\n    CARD_CREATE_REQUEST,\r\n    CARD_CREATE_SUCCESS,\r\n    CARD_CREATE_FAIL,\r\n\r\n    CHARGE_CARD_REQUEST,\r\n    CHARGE_CARD_SUCCESS,\r\n    CHARGE_CARD_FAIL,\r\n\r\n    SAVED_CARDS_LIST_REQUEST,\r\n    SAVED_CARDS_LIST_SUCCESS,\r\n    SAVED_CARDS_LIST_FAIL,\r\n\r\n    DELETE_SAVED_CARD_REQUEST,\r\n    DELETE_SAVED_CARD_SUCCESS,\r\n    DELETE_SAVED_CARD_FAIL,\r\n\r\n    UPDATE_STRIPE_CARD_REQUEST,\r\n    UPDATE_STRIPE_CARD_SUCCESS,\r\n    UPDATE_STRIPE_CARD_FAIL,\r\n\r\n} from '../constants/index'\r\n\r\nimport axios from 'axios'\r\n\r\n// Action to create a new card\r\nexport const createCard = (cardData) => async (dispatch, getState) => {\r\n    try {\r\n        // Dispatch request action to indicate the start of the API call\r\n        dispatch({ type: CARD_CREATE_REQUEST })\r\n\r\n        // Get user information from the Redux state\r\n        const { userLoginReducer: { userInfo } } = getState()\r\n\r\n        // Configuration for the request headers, including authentication token\r\n        const config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",  // Set content type to JSON\r\n                Authorization: `Bearer ${userInfo.token}`,  // Include JWT token for authentication\r\n                \"Card-Number\": cardData.cardNumber,  // Additional header for card number\r\n            }\r\n        }\r\n\r\n        // Make the API call to create a new card\r\n        const { data } = await axios.post(\r\n            \"/payments/create-card/\",  // Endpoint to create a card\r\n            {\r\n                'email': cardData.email,\r\n                'number': cardData.cardNumber,\r\n                'exp_month': cardData.expMonth,\r\n                'exp_year': cardData.expYear,\r\n                'cvc': cardData.cvc,\r\n                'save_card': cardData.saveCard\r\n            },\r\n            config\r\n        )\r\n\r\n        // Dispatch success action with the response data\r\n        dispatch({\r\n            type: CARD_CREATE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        // Dispatch failure action with error details\r\n        dispatch({\r\n            type: CARD_CREATE_FAIL,\r\n            payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\r\n        })\r\n    }\r\n}\r\n\r\n// Action to charge the customer\r\nexport const chargeCustomer = (cardData) => async (dispatch, getState) => {\r\n    try {\r\n        // Dispatch request action to indicate the start of the API call\r\n        dispatch({ type: CHARGE_CARD_REQUEST })\r\n\r\n        // Get user information from the Redux state\r\n        const { userLoginReducer: { userInfo } } = getState()\r\n\r\n        // Configuration for the request headers, including authentication token\r\n        const config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",  // Set content type to JSON\r\n                Authorization: `Bearer ${userInfo.token}`  // Include JWT token for authentication\r\n            }\r\n        }\r\n\r\n        // Make the API call to charge the customer\r\n        const { data } = await axios.post(\r\n            \"/payments/charge-customer/\",  // Endpoint to charge the customer\r\n            cardData,  // Data including card details and amount\r\n            config\r\n        )\r\n\r\n        // Dispatch success action with the response data\r\n        dispatch({\r\n            type: CHARGE_CARD_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        // Dispatch failure action with error details\r\n        dispatch({\r\n            type: CHARGE_CARD_FAIL,\r\n            payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\r\n        })\r\n    }\r\n}\r\n\r\n// Action to get a list of saved cards\r\nexport const savedCardsList = () => async (dispatch, getState) => {\r\n    try {\r\n        // Dispatch request action to indicate the start of the API call\r\n        dispatch({ type: SAVED_CARDS_LIST_REQUEST })\r\n\r\n        // Get user information from the Redux state\r\n        const { userLoginReducer: { userInfo } } = getState()\r\n\r\n        // Configuration for the request headers, including authentication token\r\n        const config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",  // Set content type to JSON\r\n                Authorization: `Bearer ${userInfo.token}`  // Include JWT token for authentication\r\n            }\r\n        }\r\n\r\n        // Make the API call to get the list of saved cards\r\n        const { data } = await axios.get('/account/stripe-cards/', config)\r\n\r\n        // Dispatch success action with the response data\r\n        dispatch({\r\n            type: SAVED_CARDS_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        // Dispatch failure action with error details\r\n        dispatch({\r\n            type: SAVED_CARDS_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\r\n        })\r\n    }\r\n}\r\n\r\n// Action to update a saved Stripe card\r\nexport const updateStripeCard = (cardData) => async (dispatch, getState) => {\r\n    try {\r\n        // Dispatch request action to indicate the start of the API call\r\n        dispatch({ type: UPDATE_STRIPE_CARD_REQUEST })\r\n\r\n        // Get user information from the Redux state\r\n        const { userLoginReducer: { userInfo } } = getState()\r\n\r\n        // Configuration for the request headers, including authentication token\r\n        const config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",  // Set content type to JSON\r\n                Authorization: `Bearer ${userInfo.token}`  // Include JWT token for authentication\r\n            }\r\n        }\r\n\r\n        // Make the API call to update the card details\r\n        const { data } = await axios.post(\r\n            \"/payments/update-card/\",  // Endpoint to update a card\r\n            cardData,  // Data including updated card details\r\n            config\r\n        )\r\n\r\n        // Dispatch success action with the response data\r\n        dispatch({\r\n            type: UPDATE_STRIPE_CARD_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        // Dispatch failure action with error details\r\n        dispatch({\r\n            type: UPDATE_STRIPE_CARD_FAIL,\r\n            payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\r\n        })\r\n    }\r\n}\r\n\r\n// Action to delete a saved card\r\nexport const deleteSavedCard = (card_number) => async (dispatch, getState) => {\r\n    try {\r\n        // Dispatch request action to indicate the start of the API call\r\n        dispatch({ type: DELETE_SAVED_CARD_REQUEST })\r\n\r\n        // Get user information from the Redux state\r\n        const { userLoginReducer: { userInfo } } = getState()\r\n\r\n        // Configuration for the request headers, including authentication token\r\n        const config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",  // Set content type to JSON\r\n                Authorization: `Bearer ${userInfo.token}`  // Include JWT token for authentication\r\n            }\r\n        }\r\n\r\n        // Make the API call to delete a saved card\r\n        const { data } = await axios.post(\r\n            '/payments/delete-card/',  // Endpoint to delete a card\r\n            { \"card_number\": card_number },  // Data with the card number to delete\r\n            config\r\n        )\r\n\r\n        // Dispatch success action with the response data\r\n        dispatch({\r\n            type: DELETE_SAVED_CARD_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        // Dispatch failure action with error details\r\n        dispatch({\r\n            type: DELETE_SAVED_CARD_FAIL,\r\n            payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\r\n        })\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SACIA,mBAAmB,EACnBC,mBAAmB,EACnBC,gBAAgB,EAEhBC,mBAAmB,EACnBC,mBAAmB,EACnBC,gBAAgB,EAEhBC,wBAAwB,EACxBC,wBAAwB,EACxBC,qBAAqB,EAErBC,yBAAyB,EACzBC,yBAAyB,EACzBC,sBAAsB,EAEtBC,0BAA0B,EAC1BC,0BAA0B,EAC1BC,uBAAuB,QAEpB,oBAAoB;AAE3B,OAAOC,K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","ignoreList":[]},"metadata":{},"sourceType":"module"}